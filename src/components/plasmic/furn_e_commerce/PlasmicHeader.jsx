// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: owVdPvEphTbmsFvPUSwECY
// Component: BaUbUZuz8l79s
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuButton from "../../MenuButton"; // plasmic-import: iOEXtVVVfRc-_M/component
import LinkButton from "../../LinkButton"; // plasmic-import: 7slIBzoAypY33D/component
import IconLink from "../../IconLink"; // plasmic-import: n1q1P7iULA40pt/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: uYbqYp8q9yY0/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_furn_e_commerce.module.css"; // plasmic-import: owVdPvEphTbmsFvPUSwECY/projectcss
import * as sty from "./PlasmicHeader.module.css"; // plasmic-import: BaUbUZuz8l79s/css
import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: WXAAEKnCVdaaL/icon
import CogIcon from "./icons/PlasmicIcon__Cog"; // plasmic-import: cmDWL48NEwTUq/icon
import ShoppingCartIcon from "./icons/PlasmicIcon__ShoppingCart"; // plasmic-import: 36AROlbTIujAY/icon
import plasmicKcC4ZZ4Ol5XX from "./images/plasmic.png"; // plasmic-import: KcC4zZ4Ol5x-X/picture

export const PlasmicHeader__VariantProps = new Array("expanded");

export const PlasmicHeader__ArgProps = new Array();

function PlasmicHeader__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__expanded]: hasVariant(variants, "expanded", "expanded")
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__eCqOp)}
      >
        {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
          <MenuButton
            data-plasmic-name={"menuButton"}
            data-plasmic-override={overrides.menuButton}
            className={classNames("__wab_instance", sty.menuButton, {
              [sty.menuButton__expanded]: hasVariant(
                variants,
                "expanded",
                "expanded"
              )
            })}
            expanded={
              hasVariant(variants, "expanded", "expanded") &&
              hasVariant(globalVariants, "screen", "mobile")
                ? "expanded"
                : undefined
            }
          />
        ) : null}

        <a
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(defaultcss.all, sty.link)}
          href={"/"}
        >
          <img
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(defaultcss.img, sty.img)}
            height={624}
            role={"img"}
            src={plasmicKcC4ZZ4Ol5XX}
            width={3216}
          />
        </a>

        {(
          hasVariant(variants, "expanded", "expanded") &&
          hasVariant(globalVariants, "screen", "mobile")
            ? false
            : hasVariant(globalVariants, "screen", "mobile")
            ? false
            : true
        ) ? (
          <div
            className={classNames(defaultcss.all, sty.box__fOn6D, {
              [sty.box__expanded__fOn6D7H9M0]: hasVariant(
                variants,
                "expanded",
                "expanded"
              )
            })}
          >
            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__dAcjp)}
              href={"/#home"}
              size={"small"}
              text={"Home"}
              type={"blankGray"}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__xLnTa)}
              href={"/#new-arrival"}
              size={"small"}
              text={"New Arrival"}
              type={"blankGray"}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__y44Le)}
              href={"/#features"}
              size={"small"}
              text={"Features"}
              type={"blankGray"}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton__fl6Em)}
              href={"/#blog"}
              size={"small"}
              text={"Blog"}
              type={"blankGray"}
            />

            <LinkButton
              className={classNames("__wab_instance", sty.linkButton___0Xuoi)}
              href={"/#contact"}
              size={"small"}
              text={"Contact"}
              type={"blankGray"}
            />
          </div>
        ) : null}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__zDpFg)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__gfvxn)}
            icon={
              <SearchIcon
                className={classNames(defaultcss.all, sty.svg__gcUiN)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__ildKv)}
            icon={
              <CogIcon
                className={classNames(defaultcss.all, sty.svg__nKkCk)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__t5VFw)}
            icon={
              <ShoppingCartIcon
                className={classNames(defaultcss.all, sty.svg__kcVos)}
                role={"img"}
              />
            }
          />
        </p.Stack>
      </p.Stack>

      {(
        hasVariant(variants, "expanded", "expanded") &&
        hasVariant(globalVariants, "screen", "mobile")
          ? true
          : false
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.box__l6Yoq, {
            [sty.box__expanded__l6Yoq7H9M0]: hasVariant(
              variants,
              "expanded",
              "expanded"
            )
          })}
        >
          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__sJhLf)}
            text={"Home"}
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__xke9)}
            text={"New Arrival"}
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__yCYw)}
            text={"Features"}
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__d7V1N)}
            text={"Blog"}
            type={"blankGray"}
          />

          <LinkButton
            className={classNames("__wab_instance", sty.linkButton__jp0Ji)}
            text={"Contact"}
            type={"blankGray"}
          />
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "menuButton", "link", "img"],
  menuButton: ["menuButton"],
  link: ["link", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeader__ArgProps,
      internalVariantPropNames: PlasmicHeader__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuButton: makeNodeComponent("menuButton"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
